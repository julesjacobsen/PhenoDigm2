buildscript {
    ext {
        dependencyManagementPluginVersion = '0.5.3.RELEASE'
        springBootVersion = '1.3.0.RC1'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }

}

allprojects {
    apply plugin: 'java'
//    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group = 'uk.ac.sanger'
    version = '2.0.0'
}

subprojects {

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom 'io.spring.platform:platform-bom:2.0.0.RELEASE'
        }
    }

    dependencies {
        compile 'org.springframework:spring-core'
        compile 'org.springframework:spring-context'
        compile 'org.springframework.boot:spring-boot-starter-logging'
        compile 'mysql:mysql-connector-java'
        compile 'org.codehaus.groovy:groovy-all'
        testCompile 'junit:junit'
        testCompile 'org.springframework:spring-test'
        testCompile 'com.h2database:h2'
        testCompile 'org.flywaydb:flyway-core'
        testCompile 'org.apache.solr:solr-core'
        testCompile 'javax.servlet:javax.servlet-api'
    }
}

/**
 * Creates a solr directory
 * @param dir
 * @return
 */
def initSolrCore(File dir) {
    ext.resourceDir = '/src/main/resources/solr/'
//Configures the home directory of Solr. Set the preferred directory path here.

    ext.solrHome = dir.toPath().resolve('solr').toFile()
    println(solrHome)
    copy {
        from resourceDir + 'solr.xml'
        into solrHome
    }

    ext.coreDir = solrHome.toPath().resolve('phenodigm').toFile()
    copy {
        from resourceDir + 'core.properties'
        into coreDir
    }

    ext.coreConfDir = coreDir.toPath().resolve('conf').toFile()
    copy {
        from resourceDir + 'conf'
        from resourceDir + 'schema.xml'
        from resourceDir + 'solrconfig.xml'
        from resourceDir + 'phenodigm-data-config.xml'
        into coreConfDir
    }

    ext.coreLibDir = coreDir.toPath().resolve('lib').toFile()
//    copy {
//        from getDependencyByName('org.apache.solr:solr-core')
//        from getDependencyByName('com.h2database:h2')
//        from getDependencyByName('mysql:mysql-connector-java')
//        into coreLibDir
//    }
}



//TODO: make this return the jar of the dependency
def getDependencyByName(String dependencyName) {
    println 'copying ' + dependencyName
    return dependencyName
}
